1. 下载kingroot，root手机成功

2. 重新刷机，在破解过程中提取ps输出的log，查看破解过程中都有那些进程执行了。

3. 分析log，可知，kingroot会启动后台进程
    com.kingroot.kinguser(pid 8540, ppid zygote)
	  com.kingroot.kinguser:service(pid 6450, ppid zygote)
    krs_100213(pid xxx, ppid 1， 多个进程)
    /data/user/0/com.kingroot.kinguser/applib/ktools(pid 6696, ppid 1)

4. 尝试root时，会顺序启动下面的进程/data/data/com.kingroot.kinguser,
   krmain(pid 9876, ppid 8540, 就是com.kingroot.kinguser)
   sec0w64(pid 9978, ppid 9960, 就是krs_100213中的一个)
   dirtyc0w64(pid 10015, ppid同样是9960)
   kd(pid 10805, ppid 10150,就是dirtyc0w64)
   su_check

5.其中，在dirtyc0w结束时，就成功启动了一个root的sh(pid 10028, ppid 1)，这个，已经被应用root成功了

6.然后这个sh就拉起很多很多东西：比如

root      10028 1     10440  1020  0022b680 7c8eb1c8 S /system/bin/sh
root      10069 10028 1760   248   0023b6b4 0004931c S /dev/_krpr
root      10132 10069 1772   240   002cd688 0004060c S /dev/_krpr
root      10149 10132 10512  760   0022b680 89eab1c8 S /system/bin/sh
root      10150 10149 10512  1188  0022b680 781811c8 S /system/bin/sh
root      10398 10150 1580   248   0023b6b4 00081fac S krdemv1068
root      10459 10398 1580   104   0023b6b4 00081fac S krdemv1068
root      10460 10459 1580   536   00000000 0002baec R krdemv1068
root      10791 1     6072   356   ffffffff 00072144 S kr_worker/61:0

7.上面之后，就多出一个kr_worker的内核线程了，这个内核线程可以乱开东西。

8. sec0w64执行过程中，logd无故退出过一次， 在dirtyc0w64root成功过称中，又杀了一次，
pid变化 326 10004 10090

到此，严重怀疑本次root理由了某些logd相关的漏洞。
先把logd干掉试试。

9.本来想静态分析的，发现很困难。dirtyc0w